#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Apr 01, 2019 04:34:00 PM +0300  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support
from Utils import logger
from Utils import configuration
from Algorithm.main_flow import main as main_regression
from tkinter.filedialog import askopenfilenames, askopenfilename
from tkinter import messagebox

config = configuration.config().setup()
log = logger.setup()
#log = logger.add_log_file(log, config)
doc_paths = None
vec_path = None

STYLE_RANGE = [i for i in range(2, 100)]
DELIMITERS  = [r'\n', r'.', r'[.*?]']

def start_regression(texts_input, vec_input, enable_advanced, number_of_words, chunk_size, delay, arch, training, context_window, delimiter):
    # we should check if all the files are exist before running the algorithm
    if (texts_input):
        doc_paths = texts_input
    else:
        messagebox.showerror("Input Error", "You must insert a texts")
        return

    vec_path = vec_input if (vec_input) else None

    if (enable_advanced):
        config.set("TF-IDF", "num_of_words_per_doc", number_of_words)
        config.set("CHUNKS", "size", chunk_size)
        config.set("CHUNKS", "delay", delay)
        config.set("Word2Vec", "arch", arch)
        config.set("Word2Vec", "training_model", training)
        config.set("Word2Vec", "context_window", context_window)
        config.set("Word2Vec", "text_delimiter", delimiter)

    main = main_regression(config, doc_paths, vec_path)
    main.run()

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    main_support.set_Tk_var()
    top = Toplevel1 (root)
    main_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    main_support.set_Tk_var()
    top = Toplevel1 (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("616x469+388+146")
        top.title("Clustring Text Tool")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.0, rely=0.0, relheight=0.93, relwidth=0.964)

        self.TNotebook1.configure(width=594)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="General",compound="left",underline="-1",)
        self.TNotebook1_t0.configure(background="#d9d9d9")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Advanced Option", compound="none"
                ,underline="-1", )
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="Running",compound="left",underline="-1",)
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(3, text="Statistics", compound="none", underline="-1"
                ,)
        self.TNotebook1_t3.configure(background="#d9d9d9")
        self.TNotebook1_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t3.configure(highlightcolor="black")
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(4, text="About",compound="none",underline="-1",)
        self.TNotebook1_t4.configure(background="#d9d9d9")
        self.TNotebook1_t4.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t4.configure(highlightcolor="black")

        self.load_text_button = tk.Button(self.TNotebook1_t0)
        self.load_text_button.place(relx=0.203, rely=0.171, height=24, width=67)
        self.load_text_button.configure(activebackground="#ececec")
        self.load_text_button.configure(activeforeground="#000000")
        self.load_text_button.configure(background="#d9d9d9")
        self.load_text_button.configure(disabledforeground="#a3a3a3")
        self.load_text_button.configure(foreground="#000000")
        self.load_text_button.configure(highlightbackground="#d9d9d9")
        self.load_text_button.configure(highlightcolor="black")
        self.load_text_button.configure(pady="0")
        self.load_text_button.configure(text='''Load Texts''')
        self.load_text_button.configure(command=self.load_text_button_dialog)

        self.texts_entry = tk.Entry(self.TNotebook1_t0)
        self.texts_entry.place(relx=0.339, rely=0.171,height=20, relwidth=0.278)
        self.texts_entry.configure(background="white")
        self.texts_entry.configure(disabledforeground="#a3a3a3")
        self.texts_entry.configure(font="TkFixedFont")
        self.texts_entry.configure(foreground="#000000")
        self.texts_entry.configure(highlightbackground="#d9d9d9")
        self.texts_entry.configure(highlightcolor="black")
        self.texts_entry.configure(insertbackground="black")
        self.texts_entry.configure(selectbackground="#c4c4c4")
        self.texts_entry.configure(selectforeground="black")

        self.from_spinbox = tk.Spinbox(self.TNotebook1_t0, from_=5.0, to=100.0)
        self.from_spinbox.place(relx=0.356, rely=0.341, relheight=0.046
                , relwidth=0.076)
        self.from_spinbox.configure(activebackground="#f9f9f9")
        self.from_spinbox.configure(background="white")
        self.from_spinbox.configure(buttonbackground="#d9d9d9")
        self.from_spinbox.configure(disabledforeground="#a3a3a3")
        self.from_spinbox.configure(foreground="black")
        self.from_spinbox.configure(highlightbackground="black")
        self.from_spinbox.configure(highlightcolor="black")
        self.from_spinbox.configure(insertbackground="black")
        self.from_spinbox.configure(selectbackground="#c4c4c4")
        self.from_spinbox.configure(selectforeground="black")
        self.from_spinbox.configure(values=STYLE_RANGE)
        var = tk.StringVar(root)
        var.set(config.get("CLUSTER", "from"))
        self.from_spinbox.configure(textvariable=var)
        self.from_spinbox.configure(command=self.set_from_val)

        var = tk.StringVar(root)
        var.set(config.get("CLUSTER", "to"))
        self.to_spinbox = tk.Spinbox(self.TNotebook1_t0, from_=20.0, to=100.0)
        self.to_spinbox.place(relx=0.492, rely=0.341, relheight=0.046
                , relwidth=0.076)
        self.to_spinbox.configure(activebackground="#f9f9f9")
        self.to_spinbox.configure(background="white")
        self.to_spinbox.configure(buttonbackground="#d9d9d9")
        self.to_spinbox.configure(disabledforeground="#a3a3a3")
        self.to_spinbox.configure(foreground="black")
        self.to_spinbox.configure(highlightbackground="black")
        self.to_spinbox.configure(highlightcolor="black")
        self.to_spinbox.configure(insertbackground="black")
        self.to_spinbox.configure(selectbackground="#c4c4c4")
        self.to_spinbox.configure(selectforeground="black")
        self.to_spinbox.configure(values=STYLE_RANGE)
        var = tk.StringVar(root)
        var.set(config.get("CLUSTER", "to"))
        self.to_spinbox.configure(textvariable=var)
        self.to_spinbox.configure(command=self.set_to_val)

        self.Label4 = tk.Label(self.TNotebook1_t0)
        self.Label4.place(relx=0.169, rely=0.341, height=21, width=75)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Styles Range:''')

        self.Label5 = tk.Label(self.TNotebook1_t0)
        self.Label5.place(relx=0.432, rely=0.317, height=31, width=31)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''-''')

        self.load_vec_button = tk.Button(self.TNotebook1_t0)
        self.load_vec_button.place(relx=0.22, rely=0.78, height=24, width=59)
        self.load_vec_button.configure(activebackground="#ececec")
        self.load_vec_button.configure(activeforeground="#000000")
        self.load_vec_button.configure(background="#d9d9d9")
        self.load_vec_button.configure(disabledforeground="#a3a3a3")
        self.load_vec_button.configure(foreground="#000000")
        self.load_vec_button.configure(highlightbackground="#d9d9d9")
        self.load_vec_button.configure(highlightcolor="black")
        self.load_vec_button.configure(pady="0")
        self.load_vec_button.configure(state='disabled')
        self.load_vec_button.configure(text='''Load Vec''')
        self.load_vec_button.configure(command=self.load_vec_button_dialog)

        self.add_word_emedding_Cbutton3 = tk.Checkbutton(self.TNotebook1_t0)
        self.add_word_emedding_Cbutton3.place(relx=0.136, rely=0.634, relheight=0.061
                , relwidth=0.236)
        self.add_word_emedding_Cbutton3.configure(activebackground="#ececec")
        self.add_word_emedding_Cbutton3.configure(activeforeground="#000000")
        self.add_word_emedding_Cbutton3.configure(background="#d9d9d9")
        self.add_word_emedding_Cbutton3.configure(disabledforeground="#a3a3a3")
        self.add_word_emedding_Cbutton3.configure(foreground="#000000")
        self.add_word_emedding_Cbutton3.configure(highlightbackground="#d9d9d9")
        self.add_word_emedding_Cbutton3.configure(highlightcolor="black")
        self.add_word_emedding_Cbutton3.configure(justify='left')
        self.add_word_emedding_Cbutton3.configure(text='''Add Word Emedding''')
        self.add_word_emedding_Cbutton_var = tk.IntVar()
        self.add_word_emedding_Cbutton3.configure(variable=self.add_word_emedding_Cbutton_var)
        self.add_word_emedding_Cbutton3.configure(command=self.add_word_embedding_checkbox)
        self.add_word_emedding_Cbutton3.deselect()



        self.vec_entry = tk.Entry(self.TNotebook1_t0)
        self.vec_entry.place(relx=0.356, rely=0.78,height=20, relwidth=0.278)
        self.vec_entry.configure(background="white")
        self.vec_entry.configure(disabledforeground="#a3a3a3")
        self.vec_entry.configure(font="TkFixedFont")
        self.vec_entry.configure(foreground="#000000")
        self.vec_entry.configure(highlightbackground="#d9d9d9")
        self.vec_entry.configure(highlightcolor="black")
        self.vec_entry.configure(insertbackground="black")
        self.vec_entry.configure(selectbackground="#c4c4c4")
        self.vec_entry.configure(selectforeground="black")
        self.vec_entry.configure(state='disabled')

        self.TSeparator2 = ttk.Separator(self.TNotebook1_t0)
        self.TSeparator2.place(relx=0.085, rely=0.537, relwidth=0.847)

        self.Enable_Cbutton = tk.Checkbutton(self.TNotebook1_t1)
        self.Enable_Cbutton.place(relx=0.051, rely=0.014, relheight=0.061
                , relwidth=0.107)
        self.Enable_Cbutton.configure(activebackground="#ececec")
        self.Enable_Cbutton.configure(activeforeground="#000000")
        self.Enable_Cbutton.configure(background="#d9d9d9")
        self.Enable_Cbutton.configure(disabledforeground="#a3a3a3")
        self.Enable_Cbutton.configure(foreground="#000000")
        self.Enable_Cbutton.configure(highlightbackground="#d9d9d9")
        self.Enable_Cbutton.configure(highlightcolor="black")
        self.Enable_Cbutton.configure(justify='left')
        self.Enable_Cbutton.configure(text='''Enable''')
        self.Enable_Cbutton_var = tk.IntVar()
        self.Enable_Cbutton.configure(variable=self.Enable_Cbutton_var)
        self.Enable_Cbutton.configure(command=self.enable_button_handler)
        self.Enable_Cbutton.deselect()

        self.Word2Vec_Labelframe = tk.LabelFrame(self.TNotebook1_t1)
        self.Word2Vec_Labelframe.place(relx=0.068, rely=0.500, relheight=0.478
                , relwidth=0.898)
        self.Word2Vec_Labelframe.configure(relief='groove')
        self.Word2Vec_Labelframe.configure(foreground="black")
        self.Word2Vec_Labelframe.configure(text='''Word2Vec''')
        self.Word2Vec_Labelframe.configure(background="#d9d9d9")
        self.Word2Vec_Labelframe.configure(highlightbackground="#d9d9d9")
        self.Word2Vec_Labelframe.configure(highlightcolor="black")
        self.Word2Vec_Labelframe.configure(width=400)

        self.arch_var = tk.StringVar()

        self.Skip_Gram_Radiobutton = tk.Radiobutton(self.Word2Vec_Labelframe)
        self.Skip_Gram_Radiobutton.place(relx=0.400, rely=0.140, relheight=0.161
                , relwidth=0.155, bordermode='ignore')
        self.Skip_Gram_Radiobutton.configure(activebackground="#ececec")
        self.Skip_Gram_Radiobutton.configure(activeforeground="#000000")
        self.Skip_Gram_Radiobutton.configure(background="#d9d9d9")
        self.Skip_Gram_Radiobutton.configure(disabledforeground="#a3a3a3")
        self.Skip_Gram_Radiobutton.configure(foreground="#000000")
        self.Skip_Gram_Radiobutton.configure(highlightbackground="#d9d9d9")
        self.Skip_Gram_Radiobutton.configure(highlightcolor="black")
        self.Skip_Gram_Radiobutton.configure(justify='left')
        self.Skip_Gram_Radiobutton.configure(state='disabled')
        self.Skip_Gram_Radiobutton.configure(text='''Skip Gram''')
        self.Skip_Gram_Radiobutton.configure(variable=self.arch_var)
        self.Skip_Gram_Radiobutton.configure(value="Skip-Gram")


        self.CBOW_Radiobutton = tk.Radiobutton(self.Word2Vec_Labelframe)
        self.CBOW_Radiobutton.place(relx=0.600, rely=0.140, relheight=0.161
                , relwidth=0.119, bordermode='ignore')
        self.CBOW_Radiobutton.configure(activebackground="#ececec")
        self.CBOW_Radiobutton.configure(activeforeground="#000000")
        self.CBOW_Radiobutton.configure(background="#d9d9d9")
        self.CBOW_Radiobutton.configure(disabledforeground="#a3a3a3")
        self.CBOW_Radiobutton.configure(foreground="#000000")
        self.CBOW_Radiobutton.configure(highlightbackground="#d9d9d9")
        self.CBOW_Radiobutton.configure(highlightcolor="black")
        self.CBOW_Radiobutton.configure(justify='left')
        self.CBOW_Radiobutton.configure(state='disabled')
        self.CBOW_Radiobutton.configure(text='''CBOW''')
        self.CBOW_Radiobutton.configure(variable=self.arch_var)
        self.CBOW_Radiobutton.configure(value="CBOW")

        self.arch_var.set(config.get("Word2Vec", "arch"))
        self.training_var = tk.StringVar()

        self.Softmax_Radiobutton = tk.Radiobutton(self.Word2Vec_Labelframe)
        self.Softmax_Radiobutton.place(relx=0.400, rely=0.335, relheight=0.161
                , relwidth=0.134, bordermode='ignore')
        self.Softmax_Radiobutton.configure(activebackground="#ececec")
        self.Softmax_Radiobutton.configure(activeforeground="#000000")
        self.Softmax_Radiobutton.configure(background="#d9d9d9")
        self.Softmax_Radiobutton.configure(disabledforeground="#a3a3a3")
        self.Softmax_Radiobutton.configure(foreground="#000000")
        self.Softmax_Radiobutton.configure(highlightbackground="#d9d9d9")
        self.Softmax_Radiobutton.configure(highlightcolor="black")
        self.Softmax_Radiobutton.configure(justify='left')
        self.Softmax_Radiobutton.configure(state='disabled')
        self.Softmax_Radiobutton.configure(text='''Softmax''')
        self.Softmax_Radiobutton.configure(variable=self.training_var)
        self.Softmax_Radiobutton.configure(value="Softmax")

        self.Negative_Sampling_Radiobutton = tk.Radiobutton(self.Word2Vec_Labelframe)
        self.Negative_Sampling_Radiobutton.place(relx=0.600, rely=0.335, relheight=0.161
                , relwidth=0.242, bordermode='ignore')
        self.Negative_Sampling_Radiobutton.configure(activebackground="#ececec")
        self.Negative_Sampling_Radiobutton.configure(activeforeground="#000000")
        self.Negative_Sampling_Radiobutton.configure(background="#d9d9d9")
        self.Negative_Sampling_Radiobutton.configure(disabledforeground="#a3a3a3")
        self.Negative_Sampling_Radiobutton.configure(foreground="#000000")
        self.Negative_Sampling_Radiobutton.configure(highlightbackground="#d9d9d9")
        self.Negative_Sampling_Radiobutton.configure(highlightcolor="black")
        self.Negative_Sampling_Radiobutton.configure(justify='left')
        self.Negative_Sampling_Radiobutton.configure(state='disabled')
        self.Negative_Sampling_Radiobutton.configure(text='''Negative Sampling''')
        self.Negative_Sampling_Radiobutton.configure(variable=self.training_var)
        self.Negative_Sampling_Radiobutton.configure(value="Negative_Sampling")

        self.training_var.set(config.get("Word2Vec", "training_model"))

        self.Architecture_Label = tk.Label(self.Word2Vec_Labelframe)
        self.Architecture_Label.place(relx=0.21, rely=0.150, height=21, width=74
                , bordermode='ignore')
        self.Architecture_Label.configure(activebackground="#f9f9f9")
        self.Architecture_Label.configure(activeforeground="black")
        self.Architecture_Label.configure(background="#d9d9d9")
        self.Architecture_Label.configure(disabledforeground="#a3a3a3")
        self.Architecture_Label.configure(foreground="#000000")
        self.Architecture_Label.configure(highlightbackground="#d9d9d9")
        self.Architecture_Label.configure(highlightcolor="black")
        self.Architecture_Label.configure(text='''Architecture:''')

        self.Model_Label = tk.Label(self.Word2Vec_Labelframe)
        self.Model_Label.place(relx=0.270, rely=0.350, height=21, width=43
                , bordermode='ignore')
        self.Model_Label.configure(activebackground="#f9f9f9")
        self.Model_Label.configure(activeforeground="black")
        self.Model_Label.configure(background="#d9d9d9")
        self.Model_Label.configure(disabledforeground="#a3a3a3")
        self.Model_Label.configure(foreground="#000000")
        self.Model_Label.configure(highlightbackground="#d9d9d9")
        self.Model_Label.configure(highlightcolor="black")
        self.Model_Label.configure(text='''Model:''')

        self.Context_Windows_Label = tk.Label(self.Word2Vec_Labelframe)
        self.Context_Windows_Label.place(relx=0.155, rely=0.580, height=21, width=102
                , bordermode='ignore')
        self.Context_Windows_Label.configure(activebackground="#f9f9f9")
        self.Context_Windows_Label.configure(activeforeground="black")
        self.Context_Windows_Label.configure(background="#d9d9d9")
        self.Context_Windows_Label.configure(disabledforeground="#a3a3a3")
        self.Context_Windows_Label.configure(foreground="#000000")
        self.Context_Windows_Label.configure(highlightbackground="#d9d9d9")
        self.Context_Windows_Label.configure(highlightcolor="black")
        self.Context_Windows_Label.configure(text='''Context Windows:''')

        self.Delimiter_Label = tk.Label(self.Word2Vec_Labelframe)
        self.Delimiter_Label.place(relx=0.197, rely=0.8, height=21, width=102
                                         , bordermode='ignore')
        self.Delimiter_Label.configure(activebackground="#f9f9f9")
        self.Delimiter_Label.configure(activeforeground="black")
        self.Delimiter_Label.configure(background="#d9d9d9")
        self.Delimiter_Label.configure(disabledforeground="#a3a3a3")
        self.Delimiter_Label.configure(foreground="#000000")
        self.Delimiter_Label.configure(highlightbackground="#d9d9d9")
        self.Delimiter_Label.configure(highlightcolor="black")
        self.Delimiter_Label.configure(text='''Delimiter:''')


        self.Context_Windows_Spinbox = tk.Spinbox(self.Word2Vec_Labelframe, from_=1.0, to=100.0)
        self.Context_Windows_Spinbox.place(relx=0.396, rely=0.580, relheight=0.100, relwidth=0.16
                , bordermode='ignore')
        self.Context_Windows_Spinbox.configure(activebackground="#f9f9f9")
        self.Context_Windows_Spinbox.configure(background="white")
        self.Context_Windows_Spinbox.configure(buttonbackground="#d9d9d9")
        self.Context_Windows_Spinbox.configure(disabledforeground="#a3a3a3")
        self.Context_Windows_Spinbox.configure(foreground="black")
        self.Context_Windows_Spinbox.configure(highlightbackground="black")
        self.Context_Windows_Spinbox.configure(highlightcolor="black")
        self.Context_Windows_Spinbox.configure(insertbackground="black")
        self.Context_Windows_Spinbox.configure(selectbackground="#c4c4c4")
        self.Context_Windows_Spinbox.configure(selectforeground="black")
        self.Context_Windows_Spinbox.configure(state='disabled')
        self.Context_Windows_var = tk.StringVar(root)
        self.Context_Windows_var.set(config.get("Word2Vec", "context_window"))
        self.Context_Windows_Spinbox.configure(textvariable=self.Context_Windows_var)

        self.Delimiter_var = tk.StringVar(root)
        self.Delimiter_var.set(DELIMITERS[0])  # default value
        self.Delimiter_window = tk.OptionMenu(self.Word2Vec_Labelframe, self.Delimiter_var, *DELIMITERS)
        self.Delimiter_window.place(relx=0.392, rely=0.8, height=20, relwidth=0.17)
        self.Delimiter_window.configure(background="white")
        self.Delimiter_window.configure(disabledforeground="#a3a3a3")
        self.Delimiter_window.configure(font="TkFixedFont")
        self.Delimiter_window.configure(foreground="#000000")
        self.Delimiter_window.configure(highlightbackground="#d9d9d9")
        self.Delimiter_window.configure(highlightcolor="black")
        self.Delimiter_window.configure(state='disabled')

        self.Chunks_Labelframe = tk.LabelFrame(self.TNotebook1_t1)
        self.Chunks_Labelframe.place(relx=0.068, rely=0.240, relheight=0.255
                , relwidth=0.898)
        self.Chunks_Labelframe.configure(relief='groove')
        self.Chunks_Labelframe.configure(foreground="black")
        self.Chunks_Labelframe.configure(text='''Chunks''')
        self.Chunks_Labelframe.configure(background="#d9d9d9")
        self.Chunks_Labelframe.configure(highlightbackground="#d9d9d9")
        self.Chunks_Labelframe.configure(highlightcolor="black")
        self.Chunks_Labelframe.configure(width=530)

        self.Chunk_Size_Spinbox = tk.Spinbox(self.Chunks_Labelframe, from_=1.0, to=100.0)
        self.Chunk_Size_Spinbox.place(relx=0.396, rely=0.24, relheight=0.200, relwidth=0.16
                , bordermode='ignore')
        self.Chunk_Size_Spinbox.configure(activebackground="#f9f9f9")
        self.Chunk_Size_Spinbox.configure(background="white")
        self.Chunk_Size_Spinbox.configure(buttonbackground="#d9d9d9")
        self.Chunk_Size_Spinbox.configure(disabledforeground="#a3a3a3")
        self.Chunk_Size_Spinbox.configure(foreground="black")
        self.Chunk_Size_Spinbox.configure(highlightbackground="black")
        self.Chunk_Size_Spinbox.configure(highlightcolor="black")
        self.Chunk_Size_Spinbox.configure(insertbackground="black")
        self.Chunk_Size_Spinbox.configure(selectbackground="#c4c4c4")
        self.Chunk_Size_Spinbox.configure(selectforeground="black")
        self.Chunk_Size_Spinbox.configure(state='disabled')
        self.Chunk_Size_var = tk.StringVar(root)
        self.Chunk_Size_var.set(config.get("CHUNKS", "size"))
        self.Chunk_Size_Spinbox.configure(textvariable=self.Chunk_Size_var)

        self.Delay_Spinbox = tk.Spinbox(self.Chunks_Labelframe, from_=1.0, to=100.0)
        self.Delay_Spinbox.place(relx=0.396, rely=0.56, relheight=0.200, relwidth=0.16
                , bordermode='ignore')
        self.Delay_Spinbox.configure(activebackground="#f9f9f9")
        self.Delay_Spinbox.configure(background="white")
        self.Delay_Spinbox.configure(buttonbackground="#d9d9d9")
        self.Delay_Spinbox.configure(disabledforeground="#a3a3a3")
        self.Delay_Spinbox.configure(foreground="black")
        self.Delay_Spinbox.configure(highlightbackground="black")
        self.Delay_Spinbox.configure(highlightcolor="black")
        self.Delay_Spinbox.configure(insertbackground="black")
        self.Delay_Spinbox.configure(selectbackground="#c4c4c4")
        self.Delay_Spinbox.configure(selectforeground="black")
        self.Delay_Spinbox.configure(state='disabled')
        self.Delay_var = tk.StringVar(root)
        self.Delay_var.set(config.get("CHUNKS", "delay"))
        self.Delay_Spinbox.configure(textvariable=self.Delay_var)

        self.Chunk_Size_Label = tk.Label(self.Chunks_Labelframe)
        self.Chunk_Size_Label.place(relx=0.225, rely=0.24, height=21, width=67
                , bordermode='ignore')
        self.Chunk_Size_Label.configure(activebackground="#f9f9f9")
        self.Chunk_Size_Label.configure(activeforeground="black")
        self.Chunk_Size_Label.configure(background="#d9d9d9")
        self.Chunk_Size_Label.configure(disabledforeground="#a3a3a3")
        self.Chunk_Size_Label.configure(foreground="#000000")
        self.Chunk_Size_Label.configure(highlightbackground="#d9d9d9")
        self.Chunk_Size_Label.configure(highlightcolor="black")
        self.Chunk_Size_Label.configure(text='''Chunk Size:''')

        self.Delay_Label = tk.Label(self.Chunks_Labelframe)
        self.Delay_Label.place(relx=0.172, rely=0.56, height=21, width=95
                , bordermode='ignore')
        self.Delay_Label.configure(activebackground="#f9f9f9")
        self.Delay_Label.configure(activeforeground="black")
        self.Delay_Label.configure(background="#d9d9d9")
        self.Delay_Label.configure(disabledforeground="#a3a3a3")
        self.Delay_Label.configure(foreground="#000000")
        self.Delay_Label.configure(highlightbackground="#d9d9d9")
        self.Delay_Label.configure(highlightcolor="black")
        self.Delay_Label.configure(text='''Delay Parameter:''')

        self.TFIDF_Labelframe = tk.LabelFrame(self.TNotebook1_t1)
        self.TFIDF_Labelframe.place(relx=0.068, rely=0.078, relheight=0.159
                , relwidth=0.898)
        self.TFIDF_Labelframe.configure(relief='groove')
        self.TFIDF_Labelframe.configure(foreground="black")
        self.TFIDF_Labelframe.configure(text='''TF-IDF''')
        self.TFIDF_Labelframe.configure(background="#d9d9d9")
        self.TFIDF_Labelframe.configure(highlightbackground="#d9d9d9")
        self.TFIDF_Labelframe.configure(highlightcolor="black")
        self.TFIDF_Labelframe.configure(width=150)

        self.Number_Of_Words_Label = tk.Label(self.TFIDF_Labelframe)
        self.Number_Of_Words_Label.place(relx=0.019, rely=0.462, height=21, width=176
                , bordermode='ignore')
        self.Number_Of_Words_Label.configure(activebackground="#f9f9f9")
        self.Number_Of_Words_Label.configure(activeforeground="black")
        self.Number_Of_Words_Label.configure(background="#d9d9d9")
        self.Number_Of_Words_Label.configure(disabledforeground="#a3a3a3")
        self.Number_Of_Words_Label.configure(foreground="#000000")
        self.Number_Of_Words_Label.configure(highlightbackground="#d9d9d9")
        self.Number_Of_Words_Label.configure(highlightcolor="black")
        self.Number_Of_Words_Label.configure(text='''Number of Words in Document:''')

        self.Number_Of_Words_Spinbox = tk.Spinbox(self.TFIDF_Labelframe, from_=1.0, to=100.0)
        self.Number_Of_Words_Spinbox.place(relx=0.396, rely=0.462, relheight=0.400
                , relwidth=0.16, bordermode='ignore')
        self.Number_Of_Words_Spinbox.configure(activebackground="#f9f9f9")
        self.Number_Of_Words_Spinbox.configure(background="white")
        self.Number_Of_Words_Spinbox.configure(buttonbackground="#d9d9d9")
        self.Number_Of_Words_Spinbox.configure(disabledforeground="#a3a3a3")
        self.Number_Of_Words_Spinbox.configure(foreground="black")
        self.Number_Of_Words_Spinbox.configure(highlightbackground="black")
        self.Number_Of_Words_Spinbox.configure(highlightcolor="black")
        self.Number_Of_Words_Spinbox.configure(insertbackground="black")
        self.Number_Of_Words_Spinbox.configure(selectbackground="#c4c4c4")
        self.Number_Of_Words_Spinbox.configure(selectforeground="black")
        self.Number_Of_Words_Spinbox.configure(state='disabled')
        self.Number_Of_Words_var = tk.StringVar(root)
        self.Number_Of_Words_var.set(config.get("TF-IDF", "num_of_words_per_doc"))
        self.Number_Of_Words_Spinbox.configure(textvariable=self.Number_Of_Words_var)

        self.run_button = tk.Button(self.TNotebook1_t2)
        self.run_button.place(relx=0.458, rely=0.073, height=24, width=38)
        self.run_button.configure(activebackground="#ececec")
        self.run_button.configure(activeforeground="#000000")
        self.run_button.configure(background="#d9d9d9")
        self.run_button.configure(disabledforeground="#a3a3a3")
        self.run_button.configure(foreground="#000000")
        self.run_button.configure(highlightbackground="#d9d9d9")
        self.run_button.configure(highlightcolor="black")
        self.run_button.configure(pady="0")
        self.run_button.configure(text='''RUN!''')
        self.run_button.configure(command=lambda : start_regression(self.texts_entry.get(), self.vec_entry.get(),
                                                                    self.Enable_Cbutton_var.get(),
                                                                    self.Number_Of_Words_var.get(),
                                                                    self.Chunk_Size_var.get(),
                                                                    self.Delay_var.get(),
                                                                    self.arch_var.get(),
                                                                    self.training_var.get(),
                                                                    self.Context_Windows_var.get(),
                                                                    self.Delimiter_var.get()))

        self.Labelframe3 = tk.LabelFrame(self.TNotebook1_t2)
        self.Labelframe3.place(relx=0.051, rely=0.146, relheight=0.768
                , relwidth=0.898)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(labelanchor="n")
        self.Labelframe3.configure(text='''Proccessing''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.Labelframe3.configure(width=530)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.038, rely=0.063, relheight=0.079
                , relwidth=0.155, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(selectcolor="#ffffffffffff")
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Word2Vec''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.038, rely=0.159, relheight=0.079
                , relwidth=0.115, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''TF-IDF''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.009, rely=0.254, relheight=0.079
                , relwidth=0.228, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Filtering Text''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.047, rely=0.444, relheight=0.079
                , relwidth=0.247, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Create Square Matrix''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.038, rely=0.54, relheight=0.079
                , relwidth=0.115, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''PAM''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.057, rely=0.635, relheight=0.079
                , relwidth=0.115, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Silhouette''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe3)
        self.Checkbutton5.place(relx=0.009, rely=0.349, relheight=0.079
                , relwidth=0.247, bordermode='ignore')
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Create Chunks''')
        self.Checkbutton5.configure(variable=main_support.che119)

        self.TProgressbar1 = ttk.Progressbar(self.Labelframe3)
        self.TProgressbar1.place(relx=0.057, rely=0.857, relwidth=0.868
                , relheight=0.0, height=22, bordermode='ignore')
        self.TProgressbar1.configure(mode="indeterminate")

        self.TCombobox1 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox1.place(relx=0.237, rely=0.098, relheight=0.051
                , relwidth=0.242)
        self.value_list = ["Documents Clustring", "Clustrs Map", "Interior Clustring",]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(textvariable=main_support.combobox)
        self.TCombobox1.configure(foreground="#000000")

        self.Label11 = tk.Label(self.TNotebook1_t3)
        self.Label11.place(relx=0.076, rely=0.098, height=21, width=75)
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(activeforeground="black")
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="black")
        self.Label11.configure(text='''Select Graph:''')

        self.Canvas1 = tk.Canvas(self.TNotebook1_t3)
        self.Canvas1.place(relx=0.068, rely=0.317, relheight=0.641
                , relwidth=0.886)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief='ridge')
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=523)

        self.TCombobox2 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox2.place(relx=0.237, rely=0.171, relheight=0.051
                , relwidth=0.242)
        self.TCombobox2.configure(textvariable=main_support.combobox)
        self.TCombobox2.configure(takefocus="")

        self.Label11 = tk.Label(self.TNotebook1_t3)
        self.Label11.place(relx=0.034, rely=0.171, height=21, width=105)
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(activeforeground="black")
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="black")
        self.Label11.configure(text='''Select Document:''')

        self.Labelframe4 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe4.place(relx=0.542, rely=0.024, relheight=0.232
                , relwidth=0.407)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(labelanchor="n")
        self.Labelframe4.configure(text='''Result''')
        self.Labelframe4.configure(background="#d9d9d9")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="black")
        self.Labelframe4.configure(width=240)

        self.Label12 = tk.Label(self.Labelframe4)
        self.Label12.place(relx=0.042, rely=0.211, height=21, width=103
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="black")
        self.Label12.configure(text='''Number of Styles:''')

        self.Label12 = tk.Label(self.Labelframe4)
        self.Label12.place(relx=0.021, rely=0.421, height=21, width=112
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="black")
        self.Label12.configure(text='''Max Docs In Style:''')

        self.Label12 = tk.Label(self.Labelframe4)
        self.Label12.place(relx=0.063, rely=0.632, height=21, width=102
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="black")
        self.Label12.configure(text='''Min Docs In Style:''')

        self.Label13 = tk.Label(self.Labelframe4)
        self.Label13.place(relx=0.542, rely=0.211, height=21, width=54
                , bordermode='ignore')
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(activeforeground="black")
        self.Label13.configure(background="#d9d9d9")
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(foreground="#000000")
        self.Label13.configure(highlightbackground="#d9d9d9")
        self.Label13.configure(highlightcolor="black")
        self.Label13.configure(text='''5''')

        self.Label13 = tk.Label(self.Labelframe4)
        self.Label13.place(relx=0.542, rely=0.421, height=21, width=54
                , bordermode='ignore')
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(activeforeground="black")
        self.Label13.configure(background="#d9d9d9")
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(foreground="#000000")
        self.Label13.configure(highlightbackground="#d9d9d9")
        self.Label13.configure(highlightcolor="black")
        self.Label13.configure(text='''7''')

        self.Label13 = tk.Label(self.Labelframe4)
        self.Label13.place(relx=0.542, rely=0.632, height=21, width=54
                , bordermode='ignore')
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(activeforeground="black")
        self.Label13.configure(background="#d9d9d9")
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(foreground="#000000")
        self.Label13.configure(highlightbackground="#d9d9d9")
        self.Label13.configure(highlightcolor="black")
        self.Label13.configure(text='''2''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.422, rely=0.938, height=21, width=87)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Copyright© RK''')

    def add_word_embedding_checkbox(self, event=None):
        set = self.add_word_emedding_Cbutton_var.get()
        if (set):
            self.load_vec_button.configure(state="active")
            self.vec_entry.configure(state="normal")
        else:
            self.load_vec_button.configure(state="disable")
            self.vec_entry.delete(0,tk.END)
            self.vec_entry.insert(0,"")
            self.vec_entry.configure(state="disable")

    def load_text_button_dialog(self, event=None):
        doc_paths = askopenfilenames(title='Choose a text files', filetypes=[("TEXT Files", ".txt")])
        self.texts_entry.insert(0, doc_paths)


    def load_vec_button_dialog(self, event=None):
        vec_path = askopenfilename(title='Choose a vec file', filetypes=[("VEC Files", ".vec")])
        self.vec_entry.insert(0, vec_path)

    def set_from_val(self, event=None):
        if(int(self.to_spinbox.get()) < int(self.from_spinbox.get())):
            self.from_spinbox.invoke("buttondown")
        config.set("CLUSTER", "from", str(self.from_spinbox.get()))

    def set_to_val(self, event=None):
        if(int(self.to_spinbox.get()) < int(self.from_spinbox.get())):
            self.to_spinbox.invoke("buttonup")
        config.set("CLUSTER", "to", str(self.to_spinbox.get()))

    def enable_button_handler(self, event=None):
        set = self.Enable_Cbutton_var.get()
        if (set):
            self.Number_Of_Words_Spinbox.configure(state='normal')
            self.Delay_Spinbox.configure(state='normal')
            self.Chunk_Size_Spinbox.configure(state='normal')
            self.Context_Windows_Spinbox.configure(state='normal')
            self.Softmax_Radiobutton.configure(state="normal")
            self.Negative_Sampling_Radiobutton.configure(state="normal")
            self.CBOW_Radiobutton.configure(state="normal")
            self.Skip_Gram_Radiobutton.configure(state="normal")
            self.Delimiter_window.configure(state="normal")
        else:
            self.Number_Of_Words_Spinbox.configure(state='disable')
            self.Delay_Spinbox.configure(state='disable')
            self.Chunk_Size_Spinbox.configure(state='disable')
            self.Context_Windows_Spinbox.configure(state='disable')
            self.Softmax_Radiobutton.configure(state="disable")
            self.Negative_Sampling_Radiobutton.configure(state="disable")
            self.CBOW_Radiobutton.configure(state="disable")
            self.Skip_Gram_Radiobutton.configure(state="disable")
            self.Delimiter_window.configure(state="disable")



    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="{Segoe UI} 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.post(event.x_root, event.y_root)

if __name__ == '__main__':
    vp_start_gui()





